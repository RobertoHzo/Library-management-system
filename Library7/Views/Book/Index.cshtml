@model IEnumerable<Library7.Models.Book>

@{
	ViewData["Title"] = "Index";
}
<style>
	.swal2-confirm {
		background-color: blue !important;
		color: white !important;
	}

	/*.swal2-cancel {
					background-color: blue !important;
					color: white !important;
				}*/

	.swal2-deny {
		background-color: blue !important;
		color: white !important;
	}
</style>
<h1>Index</h1>

<p>
	<a asp-action="Create">Create New</a>
</p>
<table class="table" id="IndxTbl">
	<thead>
		<tr>
			<th>
				@Html.DisplayNameFor(model => model.ISBN)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Title)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Author)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Id_Section)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Image)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Group_Id)
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>
					@Html.DisplayFor(modelItem => item.ISBN)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Title)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Author)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Id_Section)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Image)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Group_Id)
				</td>
				<td>
					<a asp-action="CreateCopy" asp-route-id="@item.Id_Book">Create copy</a> |
					@*<a asp-action="Edit" asp-route-id="@item.Id_Book">Edit</a> |*@
					<button onclick="SAlert(@item.Id_Book)">Edit</button>
					<a asp-action="Details" asp-route-id="@item.Id_Book">Details</a> |
					<a asp-action="Delete" asp-route-id="@item.Id_Book">Delete</a>
				</td>
			</tr>
		}
	</tbody>
</table>
@section Scripts{
	<script>
		

		//$(document).ready(function () {
		//	$('#IndxTbl').DataTable();
		//});
		function SAlert(id) {
			Swal.fire({
				title: 'Do you want to continue?',
				showDenyButton: true,
				showCancelButton: true,
				confirmButtonText: `Edit ISBN`,
				denyButtonText: `Edit other data`,
				cancelButtonText: `Cancel`,
			}).then((result) => {
				/* handle button click events */
				if (result.isConfirmed) {
					// User clicked the "ISBN" button
					window.location.href = "@Url.Action("Edit","Book")" + "?id=" + id + "&option=1";
				} else if (result.isDenied) {
					// User clicked the "Other data" button
					window.location.href = "@Url.Action("Edit","Book")" + "?id=" + id + "&option=0";
				} else if (result.isDismissed) {
					// User clicked the "Cancel" button or clicked outside the modal

				}
			});
		}
		//-------------
		// Signal R
		let connection = new signalR.HubConnectionBuilder().withUrl("/signalrhub", {
			skipNegotiation: true,
			transport: signalR.HttpTransportType.WebSockets
		}).build();

		connection.start()
			.then(function () {
				console.log('connection started');
			})
			.catch(error => {
				console.error(error.message);
			});

		connection.on(("BookModification"), function () {
			console.log("success");
		});
	</script>
}
