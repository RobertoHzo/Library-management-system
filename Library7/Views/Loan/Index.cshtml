@model IEnumerable<Library7.Models.Loan>

@{
	ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
	<a asp-action="Create">Create New</a>
	<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#myModal">
		Loan configuration
	</button>
</p>
<table class="table" id="IndxTbl">
	<thead>
		<tr>
			<th>
				@Html.DisplayNameFor(model => model.Id_Loan)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Id_Book)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Id_Member)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.LoanDate)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.DueDate)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.ReturnDate)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Fine)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Finished)
			</th>

			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>
					@Html.DisplayFor(modelItem => item.Id_Loan)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Id_Book)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Id_Member)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.LoanDate)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.DueDate)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.ReturnDate)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Fine)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Finished)
				</td>

				<td>
					<a asp-action="Edit" asp-route-id="@item.Id_Loan">Edit</a> |
					<a asp-action="Details" asp-route-id="@item.Id_Loan">Details</a>
					@*<a asp-action="Delete" asp-route-id="@item.Id_Loan">Delete</a>*@
					@if (item.Finished != true)
					{
						@*<form asp-action="FinishLoan">
				| <input type="hidden" name="Id_Loan" value="@item.Id_Loan" />
				<input type="submit" value="Finish" />
				</form>*@
						<p> | </p>

						<button class="btn" onclick="getFine(@item.Id_Loan)">Get fine</button>
					}

				</td>
			</tr>
		}
	</tbody>
</table>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title" id="myModalLabel">Modal Title</h4>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<form asp-action="EditLoanConfig">
				<div class="modal-body">
					<input type="hidden" name="Id" value="@ViewBag.Config.Id" />
					<label for="Weekends">
						Weekends (Saturday and Sunday)
						<input name="Weekends" id="InputWeekends" type="checkbox" value="true" />
					</label>
					<label for="FineAmount">FineAmount</label>
					<input name="FineAmount" type="number" value="@ViewBag.Config.FineAmount" />
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
					<button type="submit" class="btn btn-primary">Save changes</button>
				</div>
			</form>
		</div>
	</div>
</div>

@section Scripts{
	<script>
		var WEvalue = ("@ViewBag.Config.Weekends").toLowerCase();
		var checkbox = document.getElementById("InputWeekends");

		if (WEvalue === "true") {
			checkbox.checked = true;
		}
		$('#myModal').on('show.bs.modal', function () {
			console.log('Modal shown');
		});

		function getFine(Id_Loan, ReturnDate) {
			fetch('@Url.Action("ShowFineAmount","Loan")' + "?Id_Loan=" + Id_Loan)
				.then(response => response.json())
				.then(data => {
					if (data[0].days && data[0].fine != 0) {
						Swal.fire({
							title: 'Are you sure to finish the loan?',
							text: `Days late: ${data[0].days}  Fine: $${data[0].fine}`,
							icon: 'question',
							showCancelButton: true,
							confirmButtonColor: '#3085d6',
							cancelButtonColor: '#d33',
							confirmButtonText: 'Confirm'
						}).then((result) => {
							if (result.isConfirmed) {
								$.post("@Url.Action("FinishLoan","Loan")" + "?Id_Loan=" + Id_Loan);
								Swal.fire(
									'Finished!',
									'The loan has been finished.',
									'success'
								)
							}
						})
					}
					else {
						Swal.fire({
							title: 'Are you sure to finish the loan?',
							icon: 'question',
							showCancelButton: true,
							confirmButtonColor: '#3085d6',
							cancelButtonColor: '#d33',
							confirmButtonText: 'Confirm'
						}).then((result) => {
							if (result.isConfirmed) {
								$.post("@Url.Action("FinishLoan","Loan")" + "?Id_Loan=" + Id_Loan);
								Swal.fire(
									'Finished!',
									'The loan has been finished.',
									'success'
								)
							}
						})
					}
				}

				)
				.catch(error => console.error(error));
		}

		//-------------
		// Signal R
		let connection = new signalR.HubConnectionBuilder().withUrl("/signalrhub", {
			skipNegotiation: true,
			transport: signalR.HttpTransportType.WebSockets
		}).build();

		connection.start()
			.then(function () {
				console.log('connection started');
			})
			.catch(error => {
				console.error(error.message);
			});

		connection.on(("LoanModification"), function () {
			console.log("success");
		});



	</script>
}
